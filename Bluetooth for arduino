#include <ArduinoBLE.h>
#include <Servo.h>
#define STOP 101
BLEService ledService("19B10002-E8F2-537E-4F6C-D104768A1214"); // Bluetooth速 Low Energy LED Service

// Bluetooth速 Low Energy LED Switch Characteristic - custom 128-bit UUID, read and writable by central
BLEByteCharacteristic switchCharacteristic("19B10001-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);

const int ledPin = LED_BUILTIN; // pin to use for the LED
Servo motorControl;             // servo object for motor
const int motorPin = 10;         // pin to use for the motor control

const int inputMin = 48;   // Minimum value of the input range
const int inputMax = 57; // Maximum value of the input range
const int outputMin = 90;  // Minimum value of the output range for LED (assuming it's a digital output)
const int outputMax = 100; // Maximum value of the output range for LED (assuming it's a digital output)

int mappedValue = 96;
int inputValue = 96;
int oldValue = 1;

void setup() {
  Serial.begin(115200);
  while (!Serial);

  motorControl.attach(motorPin); // attach motor to pin 9

  // set LED pin to output mode
  pinMode(ledPin, OUTPUT);

  // begin initialization
  if (!BLE.begin()) {
    Serial.println("starting Bluetooth速 Low Energy module failed!");
    while (1);
  }

  // set advertised local name and service UUID:
  BLE.setLocalName("LED");
  BLE.setAdvertisedService(ledService);

  // add the characteristic to the service
  ledService.addCharacteristic(switchCharacteristic);

  // add service
  BLE.addService(ledService);

  // set the initial value for the characteristic:
  switchCharacteristic.writeValue(90);

  // start advertising
  BLE.advertise();

  Serial.println("BLE LED Peripheral");
}

void loop() {
  motorControl.write(STOP);
  // listen for Bluetooth速 Low Energy peripherals to connect:
  BLEDevice central = BLE.central();

  // if a central is connected to peripheral:
  if (central) {
    Serial.print("Connected to central: ");
    // print the central's MAC address:
    Serial.println(central.address());

    // while the central is still connected to peripheral:
    while (central.connected()) {
      // if the remote device wrote to the characteristic,
      // use the value to control the LED and motor:
      // input value from float to int - DONE
      // input value changes by >=2 it does something, !something do nothing
      if (switchCharacteristic.written()) {
         inputValue = switchCharacteristic.value();
         mappedValue = 145 - inputValue;
        if (mappedValue - oldValue >= 1 || mappedValue - oldValue <= -1) {
          Serial.print("oldValue = ");
          Serial.println(oldValue);

          Serial.print("Received value: ");
          Serial.println(mappedValue);

          if (mappedValue != 90) {
            Serial.println("LED on");
            digitalWrite(ledPin, HIGH); // will turn the LED on
          } else {
            Serial.println(F("LED off"));
            digitalWrite(ledPin, LOW); // will turn the LED off
          }

          // Control the servo motor
          motorControl.write(mappedValue);
          Serial.println(inputValue);
          oldValue = mappedValue;
        }
      }
    }

    // when the central disconnects, print it out:
    Serial.print(F("Disconnected from central: "));
    Serial.println(central.address());
  }
}
